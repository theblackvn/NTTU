<?php

namespace AMZ\ProfileBundle\Repository;

use Doctrine\ORM\QueryBuilder;

/**
 * BmiResultRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BmiResultRepository extends \Doctrine\ORM\EntityRepository
{
    private function init($criteria)
    {
        try {

            $qb = $this->createQueryBuilder('t');

            if (isset($criteria['id'])) {
                $qb->andWhere(
                    $qb->expr()->eq('t.id', $criteria['id'])
                );
            }
            if (isset($criteria['category'])) {
                $qb->andWhere(
                    $qb->expr()->eq('t.category', $criteria['category'])
                );
            }
            if (isset($criteria['subCategory'])) {
                $qb->andWhere(
                    $qb->expr()->eq('t.subCategory', $criteria['subCategory'])
                );
            }
            if (isset($criteria['resultType'])) {
                $qb->andWhere(
                    $qb->expr()->eq('t.resultType', $criteria['resultType'])
                );
            }
            if (isset($criteria['gender'])) {
                $qb->andWhere(
                    $qb->expr()->eq('t.gender', $criteria['gender'])
                );
            }

            return $qb;
        } catch (\Exception $e){
            var_dump($e->getMessage());die();
            return NULL;
        }
    }

    public function total(array $criteria)
    {
        $qb = $this->init($criteria);
        $qb->select($qb->expr()->countDistinct('t.id'));
        return $qb->getQuery()->getSingleScalarResult();
    }

    private function order(array $orderBy = null, QueryBuilder &$qb)
    {
        if (!empty($orderBy['id'])) {
            $qb->addOrderBy('t.id', $orderBy['id']);
        }
    }

    public function findOneBy(array $criteria, array $orderBy = null)
    {
        $qb = $this->init($criteria);
        $qb->setFirstResult(0)
            ->setMaxResults(1);
        $this->order($orderBy, $qb);
        $qb->groupBy('t.id');
        return $qb->getQuery()->getSingleResult();
    }

    public function get($criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $qb = $this->init($criteria);
        if (isset($limit) && isset($offset)) {
            $qb->setFirstResult($offset)
                ->setMaxResults($limit);
        }
        $this->order($orderBy, $qb);
        $qb->groupBy('t.id');
        return $qb->getQuery()->getResult();
    }

    public function query($criteria, array $orderBy = null)
    {
        $qb = $this->init($criteria);
        $this->order($orderBy, $qb);
        $qb->groupBy('t.id');
        return $qb->getDQL();
    }
}
