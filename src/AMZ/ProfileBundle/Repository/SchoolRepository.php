<?php

namespace AMZ\ProfileBundle\Repository;

use Doctrine\ORM\QueryBuilder;

/**
 * SchoolRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SchoolRepository extends \Doctrine\ORM\EntityRepository
{
    private function init($criteria)
    {
        $qb = $this->createQueryBuilder('t');
        if (!empty($criteria['admin_keyword'])) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like('t.name', $qb->expr()->literal("%{$criteria['admin_keyword']}%")),
                    $qb->expr()->like('t.code', $qb->expr()->literal("%{$criteria['admin_keyword']}%"))
                )
            );
        }
        if (isset($criteria['id'])) {
            $qb->andWhere(
                $qb->expr()->eq('t.id', $criteria['id'])
            );
        }
        if (!empty($criteria['admin_filter_city'])) {
            $data = explode('-', $criteria['admin_filter_city']);
            $qb->andWhere(
                $qb->expr()->like('t.city', $qb->expr()->literal($data[0])),
                $qb->expr()->like('t.district', $qb->expr()->literal($data[1]))
            );
        }
        if (!empty($criteria['city'])) {
            $qb->andWhere(
                $qb->expr()->like('t.city', $qb->expr()->literal($criteria['city']))
            );
        }
        if (!empty($criteria['district'])) {
            $qb->andWhere(
                $qb->expr()->like('t.district', $qb->expr()->literal($criteria['district']))
            );
        }
        return $qb;
    }

    public function total(array $criteria)
    {
        $qb = $this->init($criteria);
        $qb->select($qb->expr()->countDistinct('t.id'));
        return $qb->getQuery()->getSingleScalarResult();
    }

    private function order(array $orderBy = null, QueryBuilder &$qb)
    {
        if (empty($orderBy)) {
            $qb->orderBy('t.id', 'DESC');
        } else {
            if (!empty($orderBy['id'])) {
                $qb->addOrderBy('t.id', $orderBy['id']);
            }
            if (!empty($order['name'])) {
                $qb->addOrderBy('t.name', $orderBy['name']);
            }
        }
    }

    public function findOneBy(array $criteria, array $orderBy = null)
    {
        $qb = $this->init($criteria);
        $qb->setFirstResult(0)
            ->setMaxResults(1);
        $this->order($orderBy, $qb);
        $qb->groupBy('t.id');
        return $qb->getQuery()->getSingleResult();
    }

    public function get($criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $qb = $this->init($criteria);
        if (isset($limit) && isset($offset)) {
            $qb->setFirstResult($offset)
                ->setMaxResults($limit);
        }
        $this->order($orderBy, $qb);
        $qb->groupBy('t.id');
        return $qb->getQuery()->getResult();
    }

    public function query($criteria, array $orderBy = null)
    {
        $qb = $this->init($criteria);
        $this->order($orderBy, $qb);
        $qb->groupBy('t.id');
        return $qb->getDQL();
    }
}
